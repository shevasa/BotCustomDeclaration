import logging

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline import new_task_callback, get_worker_new_task_keyboard, worker_task_callback, \
    comment_inline_keyboard, comment_markup_callback, get_my_task_keyboard, task_in_work_callback, \
    get_worker_task_in_work_keyboard, task_in_editing_callback, get_worker_task_in_editing_keyboard
from loader import dp, db, bot
from utils.misc import create_state_dict, create_my_task_text


@dp.callback_query_handler(task_in_editing_callback.filter(action='show_info'))
@dp.callback_query_handler(task_in_work_callback.filter(action='show_info'))
@dp.callback_query_handler(comment_markup_callback.filter(action='cancel'), state="comment_confirm")
@dp.callback_query_handler(new_task_callback.filter())
async def show_task(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    task_id = int(callback_data.get('task_id')) if callback_data.get('task_id') else int((await state.get_data()).get(
        'task_id'))
    if await state.get_state():
        await state.reset_state()
    logging.info(callback_data)
    task_info = dict(await db.get_task_by_task_id(task_id))
    task_type_name = await db.get_task_type_name_by_task_id(task_id)
    comment = task_info.get('comment')
    worker_comment = task_info.get('worker_comment')

    all_needed_documents = await db.all_needed_documents_by_task_name(task_type_name)
    documents_with_saved_files = create_state_dict(all_needed_documents)

    await call.message.answer(f"=========================")
    await call.message.answer(f"<b>–ó–ê–Ø–í–ö–ê ‚Ññ{task_id}</b>")

    for dictionary in all_needed_documents:
        document_type_name = dictionary.get('document_type_name')
        document_type_id = dictionary.get('document_type_id')

        text_types_id = [dictionary['document_type_id'] for dictionary in
                         list(await db.get_document_type_id_that_can_be_text())]

        all_saved_files = [dict(file) for file in await db.get_all_task_files(task_id, document_type_id)]
        documents_with_saved_files[document_type_name] = all_saved_files

        if document_type_id in text_types_id:
            if all_saved_files:
                await call.message.answer(f'{document_type_name}‚û°Ô∏è '
                                          f"<b>{all_saved_files[0].get('media')}</b>", disable_notification=True)
            else:
                await call.message.answer(f'‚¨áÔ∏è{document_type_name}‚¨áÔ∏è', disable_notification=True)
                await call.message.answer("----------–ü—É—Å—Ç–æ---------", disable_notification=True)

        else:
            await call.message.answer(f"‚¨áÔ∏è{document_type_name}‚¨áÔ∏è", disable_notification=True)
            if all_saved_files:
                await call.message.answer_media_group(media=all_saved_files, disable_notification=True)
            else:
                await call.message.answer("----------–ü—É—Å—Ç–æ---------", disable_notification=True)

    if comment:
        await call.message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚û°Ô∏è <b>{comment}</b>", disable_notification=True)

    if worker_comment and callback_data['@']=='task_in_editing':
        await call.message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è‚û°Ô∏è <b>{worker_comment}</b>", disable_notification=True)

    await call.message.answer(f"=========================")

    if callback_data['@'] == 'task_in_work':
        await call.message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π?",
                                  reply_markup=get_worker_task_in_work_keyboard(task_id=task_id, show_info=False))
    elif callback_data['@'] == 'task_in_editing':
        await call.message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π?",
                                  reply_markup=get_worker_task_in_editing_keyboard(task_id=task_id, show_info=False))
    else:
        await call.message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π?",
                                  reply_markup=get_worker_new_task_keyboard(task_id=task_id))


@dp.callback_query_handler(worker_task_callback.filter(action='take_to_work'))
async def take_task_to_work(call: types.CallbackQuery, callback_data: dict):
    task_id = int(callback_data.get('task_id'))
    user_tg_id = int(await db.change_task_status(task_id=task_id, new_task_status_id=2))

    await call.message.edit_text("‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")

    await bot.send_message(chat_id=user_tg_id, text="‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ!")


@dp.callback_query_handler(comment_markup_callback.filter(action='edit'), state="comment_confirm")
@dp.callback_query_handler(worker_task_callback.filter(action='send_to_editing'))
async def ask_worker_comment(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.answer("‚úçüèº–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –≤ –∑–∞—è–≤–∫–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å!")
    await state.update_data(data=dict(callback_data))
    await state.set_state("worker_comment")


@dp.message_handler(state="worker_comment")
async def send_task_to_editing(message: types.Message, state: FSMContext):
    worker_comment = message.text
    await state.update_data(worker_comment=worker_comment)

    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: <b>{worker_comment}</b>?",
                         reply_markup=comment_inline_keyboard)

    await state.set_state("comment_confirm")


@dp.callback_query_handler(comment_markup_callback.filter(action='add'), state="comment_confirm")
async def send_task_to_editing(call: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    logging.info(state_data)

    worker_comment = state_data["worker_comment"]
    task_id = int(state_data.get('task_id'))
    user_tg_id = int(await db.change_task_status(task_id=task_id, new_task_status_id=3, worker_comment=worker_comment))
    task = dict(await db.get_task_by_task_id(task_id))
    task_text = create_my_task_text(task)

    await bot.send_message(chat_id=user_tg_id,
                           text=task_text + f"\n\n‚ÄºÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è‚ÄºÔ∏è\n<b>{worker_comment}</b>",
                           reply_markup=get_my_task_keyboard(task_id))

    await call.message.edit_text("üì¨–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    await state.reset_state()
